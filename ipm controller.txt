package com.ipm.api.publicQuestion;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.ipm.api.exceptions.ProjectExecption;

@RestController
@CrossOrigin("http://localhost:4200")
public class PublicQuestionController {
	@Autowired
	public PublicQuestionService userv;
	HttpStatus hs;

	// Save All Unknown sms

	@PostMapping("/addunknowsms")
	public HttpStatus saveSms(@RequestBody PublicQuestion sms) {

		try {
			userv.saveSms(sms);
			return hs.CREATED;
		} catch (Exception e) {
			e.printStackTrace(); // Log the exception details
			throw new ProjectExecption("An error occurred while saving the SMS.");
		}

	}

	// Get Unknown sms
	@GetMapping("/getunknownsms")
	public List<PublicQuestion> getsmss() {
		return userv.getAllSms();
	}

	// Count unknown sms
	@GetMapping("/unknownsmscount")
	public int countUnknownSMs() {

		return userv.countSms();
	}

	@DeleteMapping("/deleteusms/{id}")
	public String deleteSms(@PathVariable("id") Long id) {

		return userv.deleteSms(id);
	}

},package com.ipm.api.customer;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.ipm.api.exceptions.ProjectExecption;

import org.springframework.web.bind.annotation.RequestMapping;

@RestController
@CrossOrigin(origins = "http://localhost:4200")
@ControllerAdvice

public class CustomerController {
	@Autowired
	CustomerService cs;
	// For adding Customer use (/addcustomer)

	@PostMapping("/addcustomer")

	public ResponseEntity<Customer> addCustomer(@RequestBody Customer cc) {
		return ResponseEntity.ok(cs.saveCustomer(cc));
	}

	@GetMapping("/showcustomers")

	public List<Customer> showallCus() {
		return cs.showCustomers();
	}

	@GetMapping("/showdata/{email}/{password}")

	public Customer showaCustomerByEamilAndPass(@PathVariable("email") String email,
			@PathVariable("password") String password) {

		Customer cu = cs.showCustomerUsingLogin(email, password);
		if (cu != null) {
			return cu;

		} else {
			return null;
		}

	}
	// Check for Login MAping.....

	@GetMapping("/login/{email}/{password}")

	public Customer ulogin(@PathVariable("email") String email, @PathVariable("password") String password)
			throws ProjectExecption {
		Customer c = cs.showCustomerUsingLogin(email, password);
		if (cs.showCustomerUsingLogin(email, password) == null) {

			throw new ProjectExecption();
		} else {

			return c;
		}
	}

	@PutMapping("/updatecustomer/{email}")

	public String updateCustomer(@PathVariable("email") String email, @RequestBody Customer customer) {
		try {

			Customer cc = cs.updateCustomerByEmail(email, customer);
			if (cc != null) {
				return customer.getCname() + " Your data is updated";
			} else {

				throw new ProjectExecption();
			}

		} catch (Exception e) {
			throw new ProjectExecption();
		}

	}

	@DeleteMapping("/deletecustomer/{id}")

	public String deleteUser(@PathVariable("id") Long id) {
		try {
			cs.deletecustomer(id);
			return id + "  this Id of Customer Deleted";
		} catch (Exception e) {
			throw new ProjectExecption("Your  " + id + " Not foud");

		}
	}

	// Count Register Customer...
	@GetMapping("/countcustomer")
	public int countCustomer() {
		List<Customer> cl = cs.showCustomers();

		return cl.size();
	}

},package com.ipm.api.customer;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.ipm.api.exceptions.ProjectExecption;

import org.springframework.web.bind.annotation.RequestMapping;

@RestController
@CrossOrigin(origins = "http://localhost:4200")
@ControllerAdvice

public class CustomerController {
	@Autowired
	CustomerService cs;
	// For adding Customer use (/addcustomer)

	@PostMapping("/addcustomer")

	public ResponseEntity<Customer> addCustomer(@RequestBody Customer cc) {
		return ResponseEntity.ok(cs.saveCustomer(cc));
	}

	@GetMapping("/showcustomers")

	public List<Customer> showallCus() {
		return cs.showCustomers();
	}

	@GetMapping("/showdata/{email}/{password}")

	public Customer showaCustomerByEamilAndPass(@PathVariable("email") String email,
			@PathVariable("password") String password) {

		Customer cu = cs.showCustomerUsingLogin(email, password);
		if (cu != null) {
			return cu;

		} else {
			return null;
		}

	}
	// Check for Login MAping.....

	@GetMapping("/login/{email}/{password}")

	public Customer ulogin(@PathVariable("email") String email, @PathVariable("password") String password)
			throws ProjectExecption {
		Customer c = cs.showCustomerUsingLogin(email, password);
		if (cs.showCustomerUsingLogin(email, password) == null) {

			throw new ProjectExecption();
		} else {

			return c;
		}
	}

	@PutMapping("/updatecustomer/{email}")

	public String updateCustomer(@PathVariable("email") String email, @RequestBody Customer customer) {
		try {

			Customer cc = cs.updateCustomerByEmail(email, customer);
			if (cc != null) {
				return customer.getCname() + " Your data is updated";
			} else {

				throw new ProjectExecption();
			}

		} catch (Exception e) {
			throw new ProjectExecption();
		}

	}

	@DeleteMapping("/deletecustomer/{id}")

	public String deleteUser(@PathVariable("id") Long id) {
		try {
			cs.deletecustomer(id);
			return id + "  this Id of Customer Deleted";
		} catch (Exception e) {
			throw new ProjectExecption("Your  " + id + " Not foud");

		}
	}

	// Count Register Customer...
	@GetMapping("/countcustomer")
	public int countCustomer() {
		List<Customer> cl = cs.showCustomers();

		return cl.size();
	}

},package com.ipm.api.customerPolicyApply;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ipm.api.exceptions.ProjectExecption;

@RestController
@CrossOrigin("http://localhost:4200")
public class CustomerApplyPolicyController {
	@Autowired
	CustomerApplyPolicyService apservice;
	HttpStatus httpStatus;

	// Save Application
	@PostMapping("/applypolicy")

	public HttpStatus applicationSave(@RequestBody CustomerApplyPolicy cpp) {
		if (apservice.matchApplicationWithTotdalPolicy(cpp.getCustomeremail())) {

			try {

				apservice.applicatonPolicy(cpp);
				return httpStatus.CREATED;

			} catch (Exception e) {
				throw new ProjectExecption();
			}

		} else {
			throw new ProjectExecption("You can't apply  above totall Policy ");
		}

	}

	@GetMapping("/getallaplicationofpolicy")

	public List<CustomerApplyPolicy> showApplication() {

		return apservice.getCustomerApplication();
	}

	// History of application
	@GetMapping("/historyofapplications/{cemail}")
	public List<CustomerApplyPolicy> hsitory(@PathVariable("cemail") String cemail) {

		return apservice.history(cemail);
	}

	// Update Status
	@PutMapping("/updatestatus/{id}")

	public String updateStatus(@PathVariable Long id, @RequestBody CustomerApplyPolicy cap) {

		CustomerApplyPolicy cp = apservice.updateStatus(id, cap);
		if (cp != null) {

			apservice.updateStatus(id, cap);

			return "Updated";
		} else {
			throw new ProjectExecption();
		}

	}

	@GetMapping("/countApprove")
	public int countApprove() {

		return apservice.countOfApprove("Approved");
	}

	// count pending
	@GetMapping("/countPending")
	public int countPending() {

		return apservice.countOfApprove("Pending");
	}

	@GetMapping("/countrejected")
	public int countRejacted() {
		return apservice.countOfApprove("Rejected");
	}

	@GetMapping("/countapplication")
	public int countApply() {
		List<CustomerApplyPolicy> capp = apservice.getCustomerApplication();
		return capp.size();
	}

	// @Get Customer by Status----

	@GetMapping("/getcustomersByRejected")
	public List<CustomerApplyPolicy> getCustomerApplications() {

		return apservice.showDataStatus("Rejected");

	}

	@GetMapping("/getcustomersByPending")

	public List<CustomerApplyPolicy> getCustomerByPending() {

		return apservice.showDataStatus("Pending");

	}

	@GetMapping("/getcustomersByApproved")
	public List<CustomerApplyPolicy> getCustomerByApproved() {

		return apservice.showDataStatus("Approved");

	}

	// Delete Application
	@DeleteMapping("/deleteaplication/{id}")

	public HttpStatus deleteStatus(@PathVariable("id") Long id) {

		apservice.deleteCustomerApplication(id);

		return HttpStatus.OK;

	}

},package com.ipm.api.customerQuery;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.ipm.api.exceptions.ProjectExecption;

@RestController
@CrossOrigin("http://localhost:4200")
public class QustionsCustomerController {

	@Autowired
	public QustionsCustomerService qservice;
	public HttpStatus status;

	// Save Questions
	@PostMapping("/savequestion")
	public HttpStatus saveQuestionsCustomer(@RequestBody QuestionsCustomer cqs) {

		try {
			qservice.saveQuestions(cqs);
			return status.CREATED;
		} catch (Exception e) {
			throw new ProjectExecption();
		}

	}

	@GetMapping("/findQuestionsBystatus")
	public List<QuestionsCustomer> getAllPendingReply() {
		return qservice.findByReply();
	}

	@GetMapping("/countNotReply")

	public int CountAllPendingReply() {

		List<QuestionsCustomer> total_pending_reply = qservice.findByReply();
		return total_pending_reply.size();
	}

	// Get All qustions
	@GetMapping("/customerquestions")
	public List<QuestionsCustomer> getQuestions() {
		return qservice.getAllQuestions();
	}

	// Ans given By admin
	@PutMapping("/ans/{id}")
	public HttpStatus giveAnS(@PathVariable("id") Long qid, @RequestBody QuestionsCustomer qc) {
		try {

			QuestionsCustomer u = qservice.updateAns(qid, qc);
			if (u != null) {
				return status.OK;
			} else {
				throw new ProjectExecption("Your: " + qid + "Id Not Found");
			}

		} catch (Exception e) {
			throw new ProjectExecption();
		}
	}
	// Find Questions By Email Id

	@GetMapping("/findqustions/{email}")
	public List<QuestionsCustomer> finquestionsByEmail(@PathVariable("email") String e) {

		return qservice.findByEmail(e);
	}

	@GetMapping("/countCustomerQuestions")
	public int countQu() {
		List<QuestionsCustomer> cc = qservice.getAllQuestions();
		return cc.size();
	}

},package com.ipm.api.policy;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ipm.api.exceptions.ProjectExecption;

@RestController
@CrossOrigin("http://localhost:4200")

public class PolicyController {
	@Autowired
	PolicyService ps;
	HttpStatus hs;

	// Save Policys
	@PostMapping("/addpolicys")
	public HttpStatus addPolicy(@RequestBody Policy po) {
		try {
			ps.saveCustomer(po);
			return hs.CREATED;
		} catch (Exception e) {
			throw new ProjectExecption();
		}

	}

	// get policy
	@GetMapping("/getpolicys")
	public List<Policy> getPolicy() {
		return ps.showPolicy();

	}

	
	@GetMapping("/getpolicy/{id}")
    public ResponseEntity<Policy> getPolicyById(@PathVariable Long id) {
        Policy policy = ps.getPolicyById(id);
        
        if (policy != null) {
            return ResponseEntity.ok(policy);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
	// Update Policy by id
	@PutMapping("/updatepolicy/{id}")
	public HttpStatus updatePolicy(@PathVariable("id") Long id, @RequestBody Policy p) {
		Policy pp = ps.updatePolicyById(id, p);
		if (pp != null) {
			return HttpStatus.OK;
		} else {
			throw new ProjectExecption();
		}
	}

	@DeleteMapping("/deletepolicy/{id}")
	public HttpStatus deletePolicyById(@PathVariable Long id) {
		try {
			ps.deletebyid(id);
			return HttpStatus.OK;
		} catch (Exception e) {

			throw new ProjectExecption();
		}
	}

	// Counting Policies
	@GetMapping("/countpolicy")
	public int countPolicy() {
		List<Policy> total_policy = ps.showPolicy();
		return total_policy.size();
	}

},package com.ipm.api.publicQuestion;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.ipm.api.exceptions.ProjectExecption;

@RestController
@CrossOrigin("http://localhost:4200")
public class PublicQuestionController {
	@Autowired
	public PublicQuestionService userv;
	HttpStatus hs;

	// Save All Unknown sms

	@PostMapping("/addunknowsms")
	public HttpStatus saveSms(@RequestBody PublicQuestion sms) {

		try {
			userv.saveSms(sms);
			return hs.CREATED;
		} catch (Exception e) {
			e.printStackTrace(); // Log the exception details
			throw new ProjectExecption("An error occurred while saving the SMS.");
		}

	}

	// Get Unknown sms
	@GetMapping("/getunknownsms")
	public List<PublicQuestion> getsmss() {
		return userv.getAllSms();
	}

	// Count unknown sms
	@GetMapping("/unknownsmscount")
	public int countUnknownSMs() {

		return userv.countSms();
	}

	@DeleteMapping("/deleteusms/{id}")
	public String deleteSms(@PathVariable("id") Long id) {

		return userv.deleteSms(id);
	}

}